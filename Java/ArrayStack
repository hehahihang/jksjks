package chap4;

import java.util.EmptyStackException;

public class ArrayStack<E>{

	private E s[];  // E 타입 배열 s선언
	private int top; // 스택의 가장 높은지점의 위치
	public int size; // stack의 크기
	
	public ArrayStack() // 스택생성자
	{
		s = (E[]) new Object[1];
		// 배열 s 는 모든 타입의 상위클래스인 Object타입을 E타입으로 casting한 배열이다.
		top = -1;
		// 비어있으므로 top = -1
	}
	
	public int size()
	{
		// 스택도 배열이므로 인덱스는 0부터 시작하고 따라서 스택의 크기는 top+1
		return top+1;
	}
	public void resize(int newSize) //스택의 사이즈를 늘려줌
	{ //resize할 크기를 parameter로
		Object [] t = new Object[newSize];
		// object타입의 t배열을 임시로 생성한다.
		for(int i=0;i<size;i++)
			t[i] = s[i];
		// for문을 통해 배열 s의 데이터를 t로 옮긴다.
		s = (E[])t;
		// 옮겨진 배열 t를 E타입으로 캐스팅한 값이 다시 배열 S가 된다.
	}
	
	public boolean isEmpty()
	{
		return top==-1;
		//배열이 비어있다면 top==-1 --> true 아니라면 false를 return 한다.
	}
	
	public E peek() //stack 의 가장 top 데이터를 보여준다.
	{
		if(isEmpty())
			throw new EmptyStackException();
		return s[top];
	}
	
	public void push(E newItem) //E 타입의 데이터 newItem을 삽입한다.
	{
		if(size()==s.length) // 스택안에 있는 자료의 크기가 배열의 크기와 같다면
		{
			resize(2*s.length); //배열을 두배로 키워준다.
		}
		s[++top]=newItem; //그리고 top을 1증가시킨뒤 배열s의 그 자리에 새로운 데이터를 추가한다.
		
		size++;
	}
	
	public E pop() //스택 가장위의 부분을 제거한다.
	{
		if(isEmpty())
			throw new EmptyStackException();
		E item = s[top]; //배열s의 가장위에 있는 데이터를 E타입의 변수 item에 저장한다.
		s[top--]=null; //그리고 top은 null로 바꾸고 top은 1감소시킨다.
		size--; //size도 하나 줄인다.
		if(size()>0 && size()== s.length/4 ) //size가 전체길이의 1/4이되면 반으로 줄인다.
			resize(s.length/2);
		
		return item; //void형으로 선언해서 제거해도 상관없지만 어떤게 제거되는지 보기위해 item을 return한다.
	}
	
	public void print()
	{
		for(int i=0;i<size;i++)
			System.out.print(s[i]+" ");
		System.out.println();
	}
	
  // 아래는 해당 ArrayStack에 대한 메인
  
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		ArrayStack<String> st = new ArrayStack();
		st.push("a"); // 스택에 a추가
		st.push("b"); // 스택에 b추가
		st.push("c"); // 스택에 c추가
		System.out.println(st.peek()); //스택에 맨위에 무엇이 있나 peek메서드를 통해 본다. c가 출력
 		st.print(); // 스택을 순서대로 출력. a b c 출력
		st.pop(); // 스택의 가장위(top) 값을 삭제. c삭제 
		System.out.println(st.peek()); //b가 출력
		st.push("d"); // 스택에 d추가
		st.print(); // a b d 출력

	}

}
